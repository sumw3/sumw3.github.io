{"meta":{"title":"Σ","subtitle":"Avoid evil and do good! Seek peace and pursue it!","description":"Avoid evil and do good! Seek peace and pursue it!","author":"sumw3","url":"http://sumw3.com"},"pages":[{"title":"About","date":"2014-07-08T12:50:39.000Z","updated":"2016-07-19T05:52:59.229Z","comments":true,"path":"about/index.html","permalink":"http://sumw3.com/about/index.html","excerpt":"","text":"##Still Building…"},{"title":"分类","date":"2015-12-31T16:00:01.000Z","updated":"2016-08-11T12:22:29.878Z","comments":false,"path":"categories/index.html","permalink":"http://sumw3.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2015-12-31T16:00:01.000Z","updated":"2016-08-11T12:21:48.596Z","comments":false,"path":"tags/index.html","permalink":"http://sumw3.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"用 Travis CI 自动部署 Hexo","slug":"TravisCIAutoDeployHexo","date":"2016-07-21T05:21:38.000Z","updated":"2016-07-21T05:55:04.876Z","comments":true,"path":"2016/07/cirqb743r000aadlscllbluby/","link":"","permalink":"http://sumw3.com/2016/07/cirqb743r000aadlscllbluby/","excerpt":"开始之前在开始之前，请先申请 Travis CI 帐号，把你的 GitHub repo 新增到 Travis CI 上，如果还没建立 .travis.yml 的话，请先制作一个新的 .travis.yml 。 Deploy Key首先你必须用 ssh-keygen 制作一个 SSH Key ，供 GitHub 当作 Deploy key 使用。 1$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 在制作 SSH key 时，请把 passphrase 留空，因为在 Travis 上输入密码很麻烦，我目前还找不到比较简便的方式，如果各位知道的话欢迎提供给我。当 SSH key 制作完成后，复制 Public key 到GitHub上的 Deploy key 字段，如下：","text":"开始之前在开始之前，请先申请 Travis CI 帐号，把你的 GitHub repo 新增到 Travis CI 上，如果还没建立 .travis.yml 的话，请先制作一个新的 .travis.yml 。 Deploy Key首先你必须用 ssh-keygen 制作一个 SSH Key ，供 GitHub 当作 Deploy key 使用。 1$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 在制作 SSH key 时，请把 passphrase 留空，因为在 Travis 上输入密码很麻烦，我目前还找不到比较简便的方式，如果各位知道的话欢迎提供给我。当 SSH key 制作完成后，复制 Public key 到GitHub上的 Deploy key 字段，如下： 加密 Private Key首先，安装 Travis 的命令列工具： 1$ gem install travis 在安装完毕后，透过命令列工具登入到 Travis ： 1$ travis login --auto 如此一来，我们就能透过 Travis 提供的命令列工具加密刚刚所制作的 Private key ，并把它上传到 Travis 上供日后使用。 假设 Private key 的档案名称为 ssh_key，Travis 会加密并产生 ssh_key.enc ，并自动在 .travis.yml 的 before_install 字段中，自动插入解密指令。 1$ travis encrypt-file ssh_key --add 正常来说 Travis 会自动解析目前的 repo 并把 Private key 上传到相对应的 repo ，但有时可能会秀逗，这时你必须在指令后加上 -r 选项来指定 repo 名称，例如： 1$ travis encrypt-file ssh_key --add -r hexojs/site 设定 .travis.yml把刚刚制作的 ssh_key.enc 移至 .travis/ssh_key.enc ，并在 .travis 文件夹中建立 ssh_config 档案，指定 Travis 上的 SSH 设定。 12345Host github.com User git StrictHostKeyChecking no IdentityFile ~/.ssh/id_rsa IdentitiesOnly yes 因为刚刚修改了 ssh_key.enc 的位址，所以我们要顺带修改刚刚 Travis 在 .travis.yml 帮我们插入的那条解密指令。请注意，不要照抄这段指令，每个人的环境变数都不一样。 1- openssl aes-256-cbc -K $encrypted_06b8e90ac19b_key -iv $encrypted_06b8e90ac19b_iv -in .travis/ssh_key.enc -out ~/.ssh/id_rsa -d 这条指令会利用 openssl 解密 Private key ，并把解密后的档案存放在 ~/.ssh/id_rsa ，接着指定这个档案的权限： 1- chmod 600 ~/.ssh/id_rsa 然后，把 Private key 加入到系统中： 12- eval $（ssh-agent）- ssh-add ~/.ssh/id_rsa 记得刚刚我们制作的 ssh_config 档案吗？别忘了把他复制到 ~/.ssh 文件夹： 1- cp .travis/ssh_config ~/.ssh/config 为了让 git 操作能顺利进行，我们必须先设定 git 的使用者信息： 12- git config --global user.name“Tommy Chen”- git config --global user.email tommy351@gmail.com 最后的结果可能如下，如果你和我一样使用 Hexo 的话可以参考看看 12345678910111213141516171819202122232425262728293031language: node_jsnode_js: - &quot;0.10&quot;before_install: # Decrypt the private key - openssl aes-256-cbc -K $encrypted_06b8e90ac19b_key -iv $encrypted_06b8e90ac19b_iv -in .travis/ssh_key.enc -out ~/.ssh/id_rsa -d # Set the permission of the key - chmod 600 ~/.ssh/id_rsa # Start SSH agent - eval $(ssh-agent) # Add the private key to the system - ssh-add ~/.ssh/id_rsa # Copy SSH config - cp .travis/ssh_config ~/.ssh/config # Set Git config - git config --global user.name &quot;Tommy Chen&quot; - git config --global user.email tommy351@gmail.com # Install Hexo - npm install hexo@beta -g # Clone the repository - git clone https://github.com/hexojs/hexojs.github.io .deployscript: - hexo generate - hexo deploybranches: only: - master 引用：用 Travis CI 自動部署網站到 GitHub 其他 .travis.yml 参考","categories":[{"name":"OpenProjects","slug":"OpenProjects","permalink":"http://sumw3.com/categories/OpenProjects/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://sumw3.com/tags/hexo/"},{"name":"Travis CI","slug":"Travis-CI","permalink":"http://sumw3.com/tags/Travis-CI/"}]},{"title":"通过VPS自动发布HEXO","slug":"HexoAutoDeploy","date":"2014-12-31T05:00:00.000Z","updated":"2016-07-19T05:52:59.229Z","comments":true,"path":"2014/12/cirqb743j0008adlsc47darc7/","link":"","permalink":"http://sumw3.com/2014/12/cirqb743j0008adlsc47darc7/","excerpt":"之前已经在本地搭建了hexo的环境，但是还是需要每次都要在本地生成一下然后再提交到github或者gitcafe上。固定在一台电脑上写作的问题还不是太大，如果需要在不同电脑甚至不同设备上写的话就没有办法了。 之前刚好看到Bandwagon Host的特价VPS，原来都是用着别人分享的shadowsocks，以防万一，还是自己搞一个比较安全靠谱，顺便也一起搭了一个VPN，方便移动设备使用。 下面该VPS的详细配置，年付$9.99，相当便宜了。直达链接（我的小尾巴~） Basic VPS - Unmanaged - 5G PROMO V2Unmanaged service HDD: 5 GB SSD RAM: 512 MB CPU: 1x Intel Xeon BW: 500 GB/mo Link speed: 1 Gigabit VPS technology: OpenVZ/KiwiVM Linux OS: 32-bit and 64-bit Centos, Debian, Ubuntu, Fedora Instant OS reload 1 Dedicated IPv4 address Full root access PPP and VPN support (tun/tap) Instant RDNS update from control panel No contract, anytime cancellation Strictly unmanaged, no support 99% uptime guarantee 30-day money back guarantee 既然有了VPS，那我就可以把hexo的生成和发布都扔到上面去，只要我有新的markdown文件，自动通知VPS让其执行对应的同步、生成和发布即可。","text":"之前已经在本地搭建了hexo的环境，但是还是需要每次都要在本地生成一下然后再提交到github或者gitcafe上。固定在一台电脑上写作的问题还不是太大，如果需要在不同电脑甚至不同设备上写的话就没有办法了。 之前刚好看到Bandwagon Host的特价VPS，原来都是用着别人分享的shadowsocks，以防万一，还是自己搞一个比较安全靠谱，顺便也一起搭了一个VPN，方便移动设备使用。 下面该VPS的详细配置，年付$9.99，相当便宜了。直达链接（我的小尾巴~） Basic VPS - Unmanaged - 5G PROMO V2Unmanaged service HDD: 5 GB SSD RAM: 512 MB CPU: 1x Intel Xeon BW: 500 GB/mo Link speed: 1 Gigabit VPS technology: OpenVZ/KiwiVM Linux OS: 32-bit and 64-bit Centos, Debian, Ubuntu, Fedora Instant OS reload 1 Dedicated IPv4 address Full root access PPP and VPN support (tun/tap) Instant RDNS update from control panel No contract, anytime cancellation Strictly unmanaged, no support 99% uptime guarantee 30-day money back guarantee 既然有了VPS，那我就可以把hexo的生成和发布都扔到上面去，只要我有新的markdown文件，自动通知VPS让其执行对应的同步、生成和发布即可。 ###GIT@OSC通知VPS更新前面两步都没什么问题，主要是第三步，怎么让VPS知道我们已经更新的markdown文件并执行后续操作。 对比几个国内的代码托管网站，最终我选择了开源中国的GIT（GIT@OSC），这也是我平常用得最多的代码托管网站。GIT@OSC提供了了一个非常好用的功能：PUSH钩子。只要在钩子地址中填入对应的服务器地址，每次GIT@OSC收到新的PUSH的时候都会自动发一个POST请求至该地址，内容为该次PUSH的具体信息及PUSH钩子中设置的密码。 因此，我们只需要在VPS上搭建一个简答的web服务器用来响应对应的请求获取通知即可。 ###VPS获取通知执行批处理 ####获取通知 1. nginx配置获取通知主要通过nginx搭建反向代理服务器，把请求转发给Python后，通过Python执行请求的响应和后续的批处理。 由于我VPS选用的是Ubuntu，所以安装nginx也非常简单，直接执行一下命令。1$ sudo apt-get install nginx 修改/etc/nginx/sites-available/default文件，增加路由让其转发对应地址的请求至Python程序。123location /update &#123; proxy_pass http://127.0.0.1:1111; &#125; 重启nginx：1$ sudo /etc/init.d/nginx restart 2. Python配置代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#!/usr/bin/env python3#-*- coding:utf-8 -*-# start a python service and watch the nginx request dogfrom http.server import HTTPServer,CGIHTTPRequestHandlerfrom threading import Thread,RLockimport subprocessimport loggingimport sysimport os.path_PWD=os.path.abspath(os.path.dirname(__file__))def execute_cmd(args,cwd=None,timeout=30): if isinstance(args,str): args = [args] try: with subprocess.Popen(args,stdout=subprocess.PIPE,cwd=cwd) as proc: try: output,unused_err = proc.communicate(timeout=timeout) except: proc.kill() raise retcode = proc.poll() if retcode: raise subprocess.CalledProcessError(retcode, proc.args, output=output) return output.decode('utf-8','ignore') if output else '' except Exception as ex: logging.error('EXECUTE_CMD_ERROR: %s',' '.join(str(x) for x in args)) raise exclass HttpHandler(CGIHTTPRequestHandler): _lock = RLock() _counter = 0 _building = False def build(self): with HttpHandler._lock: if HttpHandler._counter == 0 or HttpHandler._building: return HttpHandler._counter = 0 HttpHandler._building = True logging.info(\"BUILDING NOW...\") try: resp = execute_cmd(os.path.join(_PWD,'build.sh'),cwd=_PWD,timeout=600) logging.info(resp) finally: HttpHandler._building = False self.build() def do_GET(self): self.do_POST() def do_POST(self): self.send_response(200,'OK') self.end_headers() self.wfile.write(b'OK') self.wfile.flush() with HttpHandler._lock: HttpHandler._counter += 1 Thread(target=self.build).start()if __name__ == '__main__': logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s',level=logging.INFO) port = int(sys.argv[1]) if len(sys.argv) &gt; 1 else 1111 logging.info('starting the server at 127.0.0.1:%s',port) httpd = HTTPServer(('127.0.0.1',port),HttpHandler) httpd.serve_forever() 将Python文件hook.py和对应的批处理文件build.sh都放置在hexo的目录下，启动Python监听：1$ nohup python3 hook.py &gt;&gt; /tmp/hook.log 2&gt;&amp;1 &amp; ####批处理Shell12345678#!/bin/bashecho \"build at `date`\". ~/.nvm/nvm.shnvm use 0.10.35git pullhexo g --decho \"built successfully\" 当然，为了让Python能够正确执行脚本，还需要执行一下命令：1$ sudo chmod +x build.sh 到此为止基本上都已经配置完毕，提交一个测试文件试一下，查看一下各自日志以及github的日志，没有问题，都成功了。 以后终于可以直接提交markdown，而不用再去生成发布，哪怕是新电脑，没有环境问题，只要有浏览器有网络，一切都那么地简单。","categories":[{"name":"OpenProjects","slug":"OpenProjects","permalink":"http://sumw3.com/categories/OpenProjects/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://sumw3.com/tags/hexo/"},{"name":"vps","slug":"vps","permalink":"http://sumw3.com/tags/vps/"},{"name":"git","slug":"git","permalink":"http://sumw3.com/tags/git/"}]},{"title":"Raneto：用Markdown写作、Nodejs搭建的Wiki","slug":"20140711-RanetoANodejsWiki","date":"2014-07-11T06:30:02.000Z","updated":"2016-07-19T05:52:59.229Z","comments":true,"path":"2014/07/cirqb74340002adlsdzym9893/","link":"","permalink":"http://sumw3.com/2014/07/cirqb74340002adlsdzym9893/","excerpt":"最近对Markdown很感兴趣，刚在Github上搭建了这个站点，用来记录平时的一些技巧心得。但是还有一些属于经常用到的，可以不断套用的东西，用现在这个站来记录的话，查找起来比较麻烦。因此，想找一款能直接Markdown记录，用树形结构组织，支持全文检索的Wiki软件。Github上搜了一圈，对比了几个Repo，最终选择Raneto。 Raneto简单介绍Markdown powered Knowledgebase for Nodejs Raneto is an open source Knowledgebase platform that uses static Markdown files to power your Knowledgebase. 基于Nodejs以及Express构建，支持GFM的Markdown文件，利用Lunr进行全文检索。 基于文件目录的URL结构，无需数据库 基于Bootstrap的响应式模板，方便多终端访问 安装由于是Nodejs应用，安装非常方便。当然，前提是机器上已有Nodejs 下载托管在Github上的Raneto代码，这里提供最新的Release版本下载。 解压，在文件夹内用命令行执行npm install安装依赖包。 命令行执行npm start启动应用。 访问http://localhost:3000即可。","text":"最近对Markdown很感兴趣，刚在Github上搭建了这个站点，用来记录平时的一些技巧心得。但是还有一些属于经常用到的，可以不断套用的东西，用现在这个站来记录的话，查找起来比较麻烦。因此，想找一款能直接Markdown记录，用树形结构组织，支持全文检索的Wiki软件。Github上搜了一圈，对比了几个Repo，最终选择Raneto。 Raneto简单介绍Markdown powered Knowledgebase for Nodejs Raneto is an open source Knowledgebase platform that uses static Markdown files to power your Knowledgebase. 基于Nodejs以及Express构建，支持GFM的Markdown文件，利用Lunr进行全文检索。 基于文件目录的URL结构，无需数据库 基于Bootstrap的响应式模板，方便多终端访问 安装由于是Nodejs应用，安装非常方便。当然，前提是机器上已有Nodejs 下载托管在Github上的Raneto代码，这里提供最新的Release版本下载。 解压，在文件夹内用命令行执行npm install安装依赖包。 命令行执行npm start启动应用。 访问http://localhost:3000即可。 内容管理默认的内容文件夹为content，里面默认已经有了Raneto的说明手册，很好的例子。修改文件名或者文件夹名称可以改变对应的URL，只要浏览器刷新整个结构貌似就会重建，这点非常强大，修改文件内容也是一样，刷新就显示。当然，通过修改config.js可以自定义content文件夹位置和静态图片位置。12345// The base URL of your images folder (can use %image_url% in Markdown files)image_url: '/images',// Specify the path of your content folder where all your '.md' files are locatedcontent_dir: './content/', 其他扩展及问题目前最理想的使用方法是在VPS上结合Dropbox来同步content和image文件夹，这样的话就可以从任意终端来更新访问了，感觉会非常方便。 当然，目前Raneto最大的问题是中文支持，其实不应该算Raneto的问题，而应该是lunrjs的问题。目前没有中文、日文检索的支持。 查看了lunrjs的Issues，发现ming300同学针对这个问题已经提过Pull Request，有需要可以参考一下。 lunrjs也有语言支持的插件lunr-languages，但是也很遗憾，还没有中文的支持，下次研究一下，看看能不能搞一个提交上去。 既然检索不了中文，那我就用定义一些Keyword来方便检索吧。","categories":[{"name":"OpenProjects","slug":"OpenProjects","permalink":"http://sumw3.com/categories/OpenProjects/"}],"tags":[{"name":"raneto","slug":"raneto","permalink":"http://sumw3.com/tags/raneto/"},{"name":"wiki","slug":"wiki","permalink":"http://sumw3.com/tags/wiki/"},{"name":"markdown","slug":"markdown","permalink":"http://sumw3.com/tags/markdown/"},{"name":"nodejs","slug":"nodejs","permalink":"http://sumw3.com/tags/nodejs/"}]},{"title":"SQL SERVER 2005恢复数据错误（3154）","slug":"20140709-3154ErrorOfSqlServer","date":"2014-07-09T12:18:31.000Z","updated":"2016-07-19T05:52:59.229Z","comments":true,"path":"2014/07/cirqb742y0000adlscvn43kxo/","link":"","permalink":"http://sumw3.com/2014/07/cirqb742y0000adlscvn43kxo/","excerpt":"###问题 在SqlServer2005的Management studio里使用bak文件还原数据库的时候总是会发生下面的错误。 Restore failed for Server ‘ADANDELI’. (Microsoft.SqlServer.Smo)An exception occurred while executing a Transact-SQL statement or batch. (Microsoft.SqlServer.ConnectionInfoThe backup set holds a backup of a database other than the existing ‘AAA’ database.RESTORE DATABASE is terminating abnormally. (Microsoft SQL Server，错误: 3154)","text":"###问题 在SqlServer2005的Management studio里使用bak文件还原数据库的时候总是会发生下面的错误。 Restore failed for Server ‘ADANDELI’. (Microsoft.SqlServer.Smo)An exception occurred while executing a Transact-SQL statement or batch. (Microsoft.SqlServer.ConnectionInfoThe backup set holds a backup of a database other than the existing ‘AAA’ database.RESTORE DATABASE is terminating abnormally. (Microsoft SQL Server，错误: 3154) ###解决方法： ####Step 1 查询备份文件中的逻辑文件名称 1234USE masterRESTORE FILELISTONLY FROM DISK = 'C:\\back.Bak'Go ####Step 2 利用bak恢复数据库，强制还原(REPLACE)。STATS = 10每完成10%显示一条记录。DBTest和DBTest_log是上面C:\\back.Bak里的逻辑文件 1234567USE masterRESTORE DATABASE DB_Test FROM DISK = 'C:\\back.Bak' WITH MOVE 'DBTest' TO 'C:\\Program Files\\Microsoft SQL Server2005\\Data\\DB.mdf', MOVE 'DBTest_log' TO 'C:\\Program Files\\Microsoft SQL Server2005\\Data\\DB_log.ldf',STATS = 10, REPLACEGO 到此数据库恢复完毕，在数据库列表中应该会出现名为DB_Test的数据库。 代码中相关参数请参考实际自行修改","categories":[{"name":"Problems","slug":"Problems","permalink":"http://sumw3.com/categories/Problems/"}],"tags":[{"name":"sql server 2005","slug":"sql-server-2005","permalink":"http://sumw3.com/tags/sql-server-2005/"},{"name":"备份还原","slug":"备份还原","permalink":"http://sumw3.com/tags/备份还原/"}]},{"title":"开始使用Hexo","slug":"Hexo-started","date":"2014-07-08T02:23:38.000Z","updated":"2016-07-19T05:52:59.229Z","comments":true,"path":"2014/07/cirqb743g0006adlsq9dm3kyi/","link":"","permalink":"http://sumw3.com/2014/07/cirqb743g0006adlsq9dm3kyi/","excerpt":"原来网站是wordpress的，用的也是免费空间000webhost。服务的稳定性还算不错，已经用了几年了，除了偶尔抽风down机之外，作为免费的空间来说还是很不错的。如果有同学要稳定的免费空间，推荐000webhost。 关于000webhost，注册可能会麻烦一点，需要挂VPN或者使用代理，具体方法可自行Google。 ###初识Hexo 一开始只是想用Markdown来写博客，但是wordpress本身对Markdown还不能支持，试了几个插件，效果都不是那么理想，在线编辑也都不支持预览，这对于一个Markdown新手来说，很不放心。 最近逛v2ex的时候也经常看到Github上搭建的静态博客。作为一个业余码农，博客更多的是记录一些平常碰到的技术问题和自己的一些学习心得，所以一个能够专注于文字和代码的Markdown加上Github这个无限免费的平台，非常有吸引力。 在Github上发布博客的工具也不少，目前最流行jekyll和octopress，但都是基于Ruby的，而Hexo是基于nodejs，且生成速度更快，所以毫不犹豫的选择了Hexo。","text":"原来网站是wordpress的，用的也是免费空间000webhost。服务的稳定性还算不错，已经用了几年了，除了偶尔抽风down机之外，作为免费的空间来说还是很不错的。如果有同学要稳定的免费空间，推荐000webhost。 关于000webhost，注册可能会麻烦一点，需要挂VPN或者使用代理，具体方法可自行Google。 ###初识Hexo 一开始只是想用Markdown来写博客，但是wordpress本身对Markdown还不能支持，试了几个插件，效果都不是那么理想，在线编辑也都不支持预览，这对于一个Markdown新手来说，很不放心。 最近逛v2ex的时候也经常看到Github上搭建的静态博客。作为一个业余码农，博客更多的是记录一些平常碰到的技术问题和自己的一些学习心得，所以一个能够专注于文字和代码的Markdown加上Github这个无限免费的平台，非常有吸引力。 在Github上发布博客的工具也不少，目前最流行jekyll和octopress，但都是基于Ruby的，而Hexo是基于nodejs，且生成速度更快，所以毫不犹豫的选择了Hexo。 ###在Windows和Mac上安装Hexo 原来机器上就已经有nodejs、git环境了，所以安装Hexo就非常简单，一句代码就搞定了。npm install hexo -g 然后就按照官网设置手册一步步设置就行，非常简单，并且网上资料也很多，随便一个问题都能Google到答案。 ###配置Hexo 初识情况下Hexo就能非常完美的运行了，当然，作为中文用户来说，首先设置一下语言选项：language: zh-CN日期格式原来英文的，不太适应，也顺便改了一下：date_format: YYYY-MM-D剩下的就默认，最后安装了下面两个插件：12&quot;hexo-generator-feed&quot;: &quot;^0.1.2&quot;, &quot;hexo-generator-sitemap&quot;: &quot;~0.1.4&quot; 主题的话，官方也提供了很多，https://github.com/hexojs/hexo/wiki/Themes，选择一个合适的，然后稍做修改即可。 我把整个文件夹Github Page也作为一个Repo同步了，这样的话不管是Windows上面还是Mac上面都可以同步修改了，比较方便。 当然利用各种云盘同步也不错，我懒得装客户端了，就直接Git了。 ###问题点 目前觉得最麻烦的还是每次发布必须在电脑上执行一下hexo d，用其他电脑想发布新内容的话会比较麻烦，更不用说移动设备了。 下一步准备弄个VPS，把Hexo部署在上面，然后用同步盘同步到VPS后定时执行hexo g、hexo d应该就可以了吧。 目前就这么多内容，下次想到什么再补充吧。","categories":[{"name":"OpenProjects","slug":"OpenProjects","permalink":"http://sumw3.com/categories/OpenProjects/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://sumw3.com/tags/markdown/"},{"name":"nodejs","slug":"nodejs","permalink":"http://sumw3.com/tags/nodejs/"},{"name":"hexo","slug":"hexo","permalink":"http://sumw3.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://sumw3.com/tags/github/"}]}]}