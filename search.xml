<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[.Net 反编译修改程序]]></title>
      <url>http://sumw3.com/2017/05/dotnetDecompile/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来有个小工具，可以直接连接数据库通过一些简单的条件筛选来查看数据。但是最近由于数据库 IP 地址变更，而那个小工具中数据库 IP 是直接写在代码中，源代码又没有，于是就没法使用了。</p>
<p>虽然说重新写一个可能也不是太费事，但是界面布局调整什么的还是挺麻烦，于是考虑是不是可以通过反编译来直接修改元程序中的 IP 地址呢？</p>
<a id="more"></a>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h3 id="1-ILSpy"><a href="#1-ILSpy" class="headerlink" title="1. ILSpy"></a>1. <a href="http://ilspy.net/" target="_blank" rel="external">ILSpy</a></h3><blockquote>
<p>ILSpy 是一个开源免费的 .NET 程序浏览与反编译程序(decompiler)，该软件开发是在2011年，在知名反编译软件 .NET <strong>reflector</strong> 宣布停止免费版后，提供给使用者不同的解决方案。</p>
<p><strong>软体特色</strong></p>
<ul>
<li>浏览、转存程序的资源。</li>
<li>反编译程序为 C# 程序语言。</li>
<li>显示程序 XML 设定文件。</li>
<li>快速的寻找类别(types)、方法(methods)、属性(properties)资料。</li>
<li>可通过外挂插件(pulgins)增强功能。</li>
</ul>
</blockquote>
<p><a href="http://www.fishlee.net/soft/ilspy_chs/" target="_blank" rel="external">中文版下载地址</a></p>
<h3 id="2-Reflexil"><a href="#2-Reflexil" class="headerlink" title="2. Reflexil"></a>2. <a href="http://reflexil.net/" target="_blank" rel="external">Reflexil</a></h3><blockquote>
<p>Reflector 能用来对各类程序集进行深度检查的工具，他们同时也都能对 .NET 的 IL code 进行反汇编。<br>但是这两个工具都无法修改对应程序集的结构或 IL code。<br>在 Jb EVAIN 实现的强大 Mono.Cecil 帮助下，Reflexil 达到了这个目标。<br>作为一个专门用来处理 IL code 的插件，Reflexil 实现了一个完整的指令编辑器，并允许直接注入 C#/VB.NET 代码。</p>
</blockquote>
<h1 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h1><h3 id="1-下载-ILSpy-和-Reflexil"><a href="#1-下载-ILSpy-和-Reflexil" class="headerlink" title="1. 下载 ILSpy 和 Reflexil"></a>1. 下载 ILSpy 和 Reflexil</h3><p>分别通过官网下载后，将 Reflexil 解压至 ILSpy 目录中。<br><img src="https://ws1.sinaimg.cn/large/68f944b2ly1ffyrflhzu6j20gx0glgnv.jpg" alt=""></p>
<p>打开 ILSpy 后会看到 Reflexil 已经集成进去。<br><img src="https://ws1.sinaimg.cn/large/68f944b2ly1ffyrig1jw5j20kg0f3jrv.jpg" alt=""></p>
<h3 id="2-打开需要修改的程序，找到修改位置"><a href="#2-打开需要修改的程序，找到修改位置" class="headerlink" title="2. 打开需要修改的程序，找到修改位置"></a>2. 打开需要修改的程序，找到修改位置</h3><p>通过 ILSpy 打开需要修改的程序。<br><img src="https://ws1.sinaimg.cn/large/68f944b2ly1ffys1gczdpj20kg0f30tj.jpg" alt=""></p>
<p>在左侧边栏中，找到要目标程序，展开后查找相关方法，明确需要修改的地方。<br><img src="https://ws1.sinaimg.cn/large/68f944b2ly1ffys1tdg42j20pc0ieack.jpg" alt=""></p>
<h3 id="3-修改-IP-变量，保存修改后程序"><a href="#3-修改-IP-变量，保存修改后程序" class="headerlink" title="3. 修改 IP 变量，保存修改后程序"></a>3. 修改 IP 变量，保存修改后程序</h3><p>侧边栏中选定对应方法，点击工具栏齿轮，打开 Reflexil 面板，找到对应的变量后右键菜单选择修改。<br><img src="https://ws1.sinaimg.cn/large/68f944b2ly1ffytg10ttij20pc0ieaby.jpg" alt=""></p>
<p>在修改框中更新 IP 值后点击 <code>Update</code>。<br><img src="https://ws1.sinaimg.cn/large/68f944b2ly1ffythk0tegj20ew04i3yc.jpg" alt=""></p>
<p>修改完成后，在侧边栏选定本次修改的程序后右键菜单，将程序另存为 <code>*.Patched.exe</code> ，该程序即为修改后的执行程序。<br><img src="https://ws1.sinaimg.cn/large/68f944b2ly1ffytkqsoekj20p50ia773.jpg" alt=""></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>通过这两个工具的使用，可以简单修改一些硬编码程序，或者从可执行程序中提取相应资源。使用起来也是很方便简单，非常好用。</p>
<blockquote>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://www.aneasystone.com/archives/2015/06/net-reverse-decompiling.html" target="_blank" rel="external">关于 .Net 逆向的那些工具：反编译篇</a></li>
<li><a href="http://qiankanglai.me/2016/03/05/reflexil/" target="_blank" rel="external">Reflexi 简明教程</a></li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OpenVZ 开启 BBR 方法]]></title>
      <url>http://sumw3.com/2017/04/bbrOnOpenVZ/</url>
      <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>BBR，是一个TCP加速优化工具，类似于锐速，可用于优化 TCP 连接。</p>
<blockquote>
<p>GitHub 地址为：<a href="https://github.com/google/bbr" target="_blank" rel="external">https://github.com/google/bbr</a></p>
</blockquote>
<p>仔细看了看，GitHub 主页上有明确的说明“This is not an official Google product.” 说明这其实不是 Google 的官方项目，但是是在 Google 的 GitHub 上，比较奇怪。</p>
<p>要想启用 BBR 需要切换内核，所以必须要 KVM 或者 XEN 架构的 VPS。这点和锐速一致，所以 OpenVZ 的朋友是用不了的。由于需要跟换内核，属于危险操作，请不要用于生产环境，可能会造成无法开机，切记！<br>至于加速效果，有人反馈比锐速好，有人反馈比锐速弱。我测试后感觉效果还是不错的，但是用起来比破解版锐速放心一些吧，它是内置到最新的内核里边了。</p>
<p>虽说 OpenVZ 在正常情况下是无法使用 BBR 的，但是通过其他一些手段还是能够达到目的。比如本文中的 LKL 。</p>
<a id="more"></a>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="1-VPS-的-Panel-里打开-TUN-TAP-功能"><a href="#1-VPS-的-Panel-里打开-TUN-TAP-功能" class="headerlink" title="1. VPS 的 Panel 里打开 TUN/TAP 功能"></a>1. VPS 的 Panel 里打开 TUN/TAP 功能</h3><h3 id="2-创建一个-tap0"><a href="#2-创建一个-tap0" class="headerlink" title="2. 创建一个 tap0"></a>2. 创建一个 tap0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ip tuntap add tap0 mode tap</div><div class="line">ip addr add 10.0.0.1/24 dev tap0</div><div class="line">ip link set tap0 up</div></pre></td></tr></table></figure>
<h3 id="3-打通-tap0-和-host-之间的网络"><a href="#3-打通-tap0-和-host-之间的网络" class="headerlink" title="3. 打通 tap0 和 host 之间的网络"></a>3. 打通 tap0 和 host 之间的网络</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -P FORWARD ACCEPT</div><div class="line">iptables -t nat -A POSTROUTING -o venet0 -j MASQUERADE</div></pre></td></tr></table></figure>
<h3 id="4-在-443-端口开启-BBR"><a href="#4-在-443-端口开启-BBR" class="headerlink" title="4. 在 443 端口开启 BBR"></a>4. 在 443 端口开启 BBR</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -t nat -A PREROUTING -i venet0 -p tcp --dport 443 -j DNAT --to-destination 10.0.0.2</div></pre></td></tr></table></figure>
<h3 id="5-安装-haproxy-，并禁止开机自启"><a href="#5-安装-haproxy-，并禁止开机自启" class="headerlink" title="5. 安装 haproxy ，并禁止开机自启"></a>5. 安装 haproxy ，并禁止开机自启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install haproxy</div><div class="line">update-rc.d haproxy disable</div></pre></td></tr></table></figure>
<h3 id="6-配置-haproxy"><a href="#6-配置-haproxy" class="headerlink" title="6. 配置 haproxy"></a>6. 配置 haproxy</h3><p>新建一个 <code>/root/haproxy/haproxy.cfg</code></p>
<blockquote>
<p>假设你原来的 server 监听的是 12580 端口， BBR 的端口开在 443</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">global</div><div class="line">user haproxy</div><div class="line">group haproxy</div><div class="line">defaults</div><div class="line">mode tcp</div><div class="line">timeout connect 5s</div><div class="line">timeout client 60s</div><div class="line">timeout server 60s</div><div class="line"></div><div class="line">listen shadowsocks</div><div class="line">bind 10.0.0.2:443</div><div class="line">server server1 10.0.0.1:12580</div></pre></td></tr></table></figure>
<h3 id="7-下载-Linux-Kernel-Library-，解压"><a href="#7-下载-Linux-Kernel-Library-，解压" class="headerlink" title="7. 下载 Linux Kernel Library ，解压"></a>7. 下载 Linux Kernel Library ，解压</h3><p>从以下地址下载 LKL，并解压至 <code>/root/haproxy</code>。</p>
<blockquote>
<p><a href="https://drive.google.com/file/d/0ByqeeKN198fcdDVLMmVKakl5VE0/view?usp=sharing" target="_blank" rel="external">https://drive.google.com/file/d/0ByqeeKN198fcdDVLMmVKakl5VE0/view?usp=sharing</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xzvf liblkl-hijack.so.tgz</div></pre></td></tr></table></figure>
<h3 id="8-开启-haproxy-为-BBR-过桥"><a href="#8-开启-haproxy-为-BBR-过桥" class="headerlink" title="8. 开启 haproxy 为 BBR 过桥"></a>8. 开启 haproxy 为 BBR 过桥</h3><p>以下命令必须一行打完</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LD_PRELOAD=/root/haproxy/liblkl-hijack.so LKL_HIJACK_NET_QDISC=&quot;root|fq&quot; LKL_HIJACK_SYSCTL=&quot;net.ipv4.tcp_congestion_control=bbr;net.ipv4.tcp_wmem=4096 65536 67108864&quot; LKL_HIJACK_NET_IFTYPE=tap LKL_HIJACK_NET_IFPARAMS=tap0 LKL_HIJACK_NET_IP=10.0.0.2 LKL_HIJACK_NET_NETMASK_LEN=24 LKL_HIJACK_NET_GATEWAY=10.0.0.1 LKL_HIJACK_OFFLOAD=&quot;0x8883&quot; haproxy -f /root/haproxy/haproxy.cfg</div></pre></td></tr></table></figure>
<h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>现在可以用客户端连上试试看了 </p>
<p>12580 是原来 server 的端口 </p>
<p>443 是开启 BBR 以后的端口</p>
<h2 id="设置开机脚本"><a href="#设置开机脚本" class="headerlink" title="设置开机脚本"></a>设置开机脚本</h2><h3 id="1-安装-supervisor"><a href="#1-安装-supervisor" class="headerlink" title="1. 安装 supervisor"></a>1. 安装 supervisor</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install supervisor</div></pre></td></tr></table></figure>
<h3 id="2-添加配置文件，用于开机自启"><a href="#2-添加配置文件，用于开机自启" class="headerlink" title="2. 添加配置文件，用于开机自启"></a>2. 添加配置文件，用于开机自启</h3><p>在目录 <code>/etc/supervisor/conf.d</code> 中增加配置文件 <code>haproxy-lkl.conf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[program:haproxy-lkl] </div><div class="line">command=/root/haproxy/haproxy-lkl-start.sh</div><div class="line">autostart=true </div><div class="line">autorestart=true </div><div class="line">redirect_stderr=true </div><div class="line">stdout_logfile=/root/haproxy/haproxy-lkl_stdout.log </div><div class="line">stdout_logfile_maxbytes=1MB </div><div class="line">stderr_logfile=/root/haproxy/haproxy-lkl_stderr.log </div><div class="line">stderr_logfile_maxbytes=1MB</div></pre></td></tr></table></figure>
<h3 id="3-为haproxy-配-Linux-Kernel-Library-的启动脚本"><a href="#3-为haproxy-配-Linux-Kernel-Library-的启动脚本" class="headerlink" title="3. 为haproxy 配 Linux Kernel Library 的启动脚本"></a>3. 为haproxy 配 Linux Kernel Library 的启动脚本</h3><p>在目录 <code>/root/haproxy</code> 中增加启动脚本 <code>haproxy-lkl-start.sh</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh </div><div class="line"></div><div class="line">ip tuntap add tap0 mode tap </div><div class="line">ip addr add 10.0.0.1/24 dev tap0 </div><div class="line">ip link set tap0 up </div><div class="line"></div><div class="line">iptables -P FORWARD ACCEPT </div><div class="line"></div><div class="line">iptables -t nat -D PREROUTING -i venet0 -p tcp --dport 443 -j DNAT --to-destination 10.0.0.2 </div><div class="line">iptables -t nat -A PREROUTING -i venet0 -p tcp --dport 443 -j DNAT --to-destination 10.0.0.2 </div><div class="line"></div><div class="line">iptables -t nat -D PREROUTING -i venet0 -p udp --dport 443 -j REDIRECT --to-port 12580 </div><div class="line">iptables -t nat -A PREROUTING -i venet0 -p udp --dport 443 -j REDIRECT --to-port 12580 </div><div class="line"></div><div class="line">export LD_PRELOAD=/root/haproxy/liblkl-hijack.so </div><div class="line">export LKL_HIJACK_NET_QDISC=&quot;root|fq&quot; </div><div class="line">export LKL_HIJACK_SYSCTL=&quot;net.ipv4.tcp_congestion_control=bbr;net.ipv4.tcp_wmem=4096 65536 67108864&quot; </div><div class="line">export LKL_HIJACK_NET_IFTYPE=tap </div><div class="line">export LKL_HIJACK_NET_IFPARAMS=tap0 </div><div class="line">export LKL_HIJACK_NET_IP=10.0.0.2 </div><div class="line">export LKL_HIJACK_NET_NETMASK_LEN=24 </div><div class="line">export LKL_HIJACK_NET_GATEWAY=10.0.0.1 </div><div class="line">export LKL_HIJACK_OFFLOAD=&quot;0x8883&quot; </div><div class="line">export LKL_HIJACK_DEBUG=1 </div><div class="line"></div><div class="line">haproxy -f /root/haproxy/haproxy.cfg</div></pre></td></tr></table></figure>
<h3 id="4-重启验证"><a href="#4-重启验证" class="headerlink" title="4. 重启验证"></a>4. 重启验证</h3><blockquote>
<p>参考来源：<a href="https://www.v2ex.com/t/353778" target="_blank" rel="external">https://www.v2ex.com/t/353778</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用 Travis CI 自动部署 Hexo]]></title>
      <url>http://sumw3.com/2016/07/TravisCIAutoDeployHexo/</url>
      <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>在开始之前，请先申请 Travis CI 帐号，把你的 GitHub repo 新增到 Travis CI 上，如果还没建立 <code>.travis.yml</code> 的话，请先制作一个新的 <code>.travis.yml</code> 。</p>
<h2 id="Deploy-Key"><a href="#Deploy-Key" class="headerlink" title="Deploy Key"></a>Deploy Key</h2><p>首先你必须用 <code>ssh-keygen</code> 制作一个 SSH Key ，供 GitHub 当作 Deploy key 使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure>
<p>在制作 SSH key 时，请把 passphrase 留空，因为在 Travis 上输入密码很麻烦，我目前还找不到比较简便的方式，如果各位知道的话欢迎提供给我。<br>当 SSH key 制作完成后，复制 Public key 到GitHub上的 Deploy key 字段，如下：</p>
<p><img src="https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/deploy_key.png" alt=""></p>
<a id="more"></a>
<h2 id="加密-Private-Key"><a href="#加密-Private-Key" class="headerlink" title="加密 Private Key"></a>加密 Private Key</h2><p>首先，安装 Travis 的命令列工具：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gem install travis</div></pre></td></tr></table></figure>
<p>在安装完毕后，透过命令列工具登入到 Travis ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ travis login --auto</div></pre></td></tr></table></figure>
<p>如此一来，我们就能透过 Travis 提供的命令列工具加密刚刚所制作的 Private key ，并把它上传到 Travis 上供日后使用。</p>
<p>假设 Private key 的档案名称为 <code>ssh_key</code>，Travis 会加密并产生 <code>ssh_key.enc</code> ，并自动在 <code>.travis.yml</code> 的 <code>before_install</code> 字段中，自动插入解密指令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ travis encrypt-file ssh_key --add</div></pre></td></tr></table></figure>
<p>正常来说 Travis 会自动解析目前的 repo 并把 Private key 上传到相对应的 repo ，但有时可能会秀逗，这时你必须在指令后加上 <code>-r</code> 选项来指定 repo 名称，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ travis encrypt-file ssh_key --add -r hexojs/site</div></pre></td></tr></table></figure>
<h2 id="设定-travis-yml"><a href="#设定-travis-yml" class="headerlink" title="设定 .travis.yml"></a>设定 <code>.travis.yml</code></h2><p>把刚刚制作的 <code>ssh_key.enc</code> 移至 <code>.travis/ssh_key.enc</code> ，并在 <code>.travis</code> 文件夹中建立 <code>ssh_config</code> 档案，指定 Travis 上的 SSH 设定。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Host github.com</div><div class="line">  User git</div><div class="line">  StrictHostKeyChecking no</div><div class="line">  IdentityFile ~/.ssh/id_rsa</div><div class="line">  IdentitiesOnly yes</div></pre></td></tr></table></figure>
<p>因为刚刚修改了 <code>ssh_key.enc</code> 的位址，所以我们要顺带修改刚刚 Travis 在 <code>.travis.yml</code> 帮我们插入的那条解密指令。请注意，不要照抄这段指令，每个人的环境变数都不一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- openssl aes-256-cbc -K $encrypted_06b8e90ac19b_key -iv $encrypted_06b8e90ac19b_iv -in .travis/ssh_key.enc -out ~/.ssh/id_rsa -d</div></pre></td></tr></table></figure>
<p>这条指令会利用 openssl 解密 Private key ，并把解密后的档案存放在 <code>~/.ssh/id_rsa</code> ，接着指定这个档案的权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- chmod 600 ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
<p>然后，把 Private key 加入到系统中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- eval $（ssh-agent）</div><div class="line">- ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
<p>记得刚刚我们制作的 <code>ssh_config</code> 档案吗？别忘了把他复制到 <code>~/.ssh</code> 文件夹：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- cp .travis/ssh_config ~/.ssh/config</div></pre></td></tr></table></figure>
<p>为了让 git 操作能顺利进行，我们必须先设定 git 的使用者信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- git config --global user.name“Tommy Chen”</div><div class="line">- git config --global user.email tommy351@gmail.com</div></pre></td></tr></table></figure>
<p>最后的结果可能如下，如果你和我一样使用 Hexo 的话可以参考看看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">language: node_js</div><div class="line"></div><div class="line">node_js:</div><div class="line">  - &quot;0.10&quot;</div><div class="line"></div><div class="line">before_install:</div><div class="line">  # Decrypt the private key</div><div class="line">  - openssl aes-256-cbc -K $encrypted_06b8e90ac19b_key -iv $encrypted_06b8e90ac19b_iv -in .travis/ssh_key.enc -out ~/.ssh/id_rsa -d</div><div class="line">  # Set the permission of the key</div><div class="line">  - chmod 600 ~/.ssh/id_rsa</div><div class="line">  # Start SSH agent</div><div class="line">  - eval $(ssh-agent)</div><div class="line">  # Add the private key to the system</div><div class="line">  - ssh-add ~/.ssh/id_rsa</div><div class="line">  # Copy SSH config</div><div class="line">  - cp .travis/ssh_config ~/.ssh/config</div><div class="line">  # Set Git config</div><div class="line">  - git config --global user.name &quot;Tommy Chen&quot;</div><div class="line">  - git config --global user.email tommy351@gmail.com</div><div class="line">  # Install Hexo</div><div class="line">  - npm install hexo@beta -g</div><div class="line">  # Clone the repository</div><div class="line">  - git clone https://github.com/hexojs/hexojs.github.io .deploy</div><div class="line"></div><div class="line">script:</div><div class="line">  - hexo generate</div><div class="line">  - hexo deploy</div><div class="line"></div><div class="line">branches:</div><div class="line">  only:</div><div class="line">    - master</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>引用：<a href="https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/" target="_blank" rel="external">用 Travis CI 自動部署網站到 GitHub</a></p>
<p>其他 <a href="https://github.com/51offer/51offer.github.com/blob/blog/.travis.yml" target="_blank" rel="external"><code>.travis.yml</code></a> 参考 </p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[通过VPS自动发布HEXO]]></title>
      <url>http://sumw3.com/2014/12/HexoAutoDeploy/</url>
      <content type="html"><![CDATA[<p>之前已经在本地搭建了hexo的环境，但是还是需要每次都要在本地生成一下然后再提交到<strong>github</strong>或者<strong>gitcafe</strong>上。固定在一台电脑上写作的问题还不是太大，如果需要在不同电脑甚至不同设备上写的话就没有办法了。</p>
<p>之前刚好看到<strong>Bandwagon Host</strong>的特价VPS，原来都是用着别人分享的shadowsocks，以防万一，还是自己搞一个比较安全靠谱，顺便也一起搭了一个VPN，方便移动设备使用。</p>
<p>下面该VPS的详细配置，年付<code>$9.99</code>，相当便宜了。<br><a href="https://bandwagonhost.com/aff.php?aff=1604&amp;pid=22" target="_blank" rel="external">直达链接（我的小尾巴~）</a></p>
<blockquote>
<p><strong>Basic VPS - Unmanaged - 5G PROMO V2</strong><br>Unmanaged service HDD: 5 GB SSD RAM: 512 MB CPU: 1x Intel Xeon BW: 500 GB/mo Link speed: 1 Gigabit VPS technology: OpenVZ/KiwiVM Linux OS: 32-bit and 64-bit Centos, Debian, Ubuntu, Fedora Instant OS reload 1 Dedicated IPv4 address Full root access PPP and VPN support (tun/tap) Instant RDNS update from control panel No contract, anytime cancellation Strictly unmanaged, no support 99% uptime guarantee 30-day money back guarantee</p>
</blockquote>
<p>既然有了VPS，那我就可以把hexo的生成和发布都扔到上面去，只要我有新的markdown文件，自动通知VPS让其执行对应的同步、生成和发布即可。<br><img src="https://ws1.sinaimg.cn/large/68f944b2gy1fexr0cdncwj20qa08igmk.jpg" alt="脑图"></p>
<a id="more"></a>
<p>###GIT@OSC通知VPS更新<br>前面两步都没什么问题，主要是第三步，怎么让VPS知道我们已经更新的markdown文件并执行后续操作。</p>
<p>对比几个国内的代码托管网站，最终我选择了<em>开源中国</em>的GIT（<strong>GIT@OSC</strong>），这也是我平常用得最多的代码托管网站。<strong>GIT@OSC</strong>提供了了一个非常好用的功能：<em>PUSH钩子</em>。<br><img src="http://pubshare.qiniudn.com/sumw3%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-31%20%E4%B8%8B%E5%8D%882.04.21.png" alt="PUSH钩子"><br>只要在钩子地址中填入对应的服务器地址，每次<strong>GIT@OSC</strong>收到新的<strong>PUSH</strong>的时候都会自动发一个<strong>POST</strong>请求至该地址，内容为该次<strong>PUSH</strong>的具体信息及<strong>PUSH钩子</strong>中设置的密码。</p>
<p>因此，我们只需要在VPS上搭建一个简答的web服务器用来响应对应的请求获取通知即可。</p>
<p>###VPS获取通知执行批处理</p>
<p>####获取通知</p>
<h5 id="1-nginx配置"><a href="#1-nginx配置" class="headerlink" title="1. nginx配置"></a>1. nginx配置</h5><p>获取通知主要通过nginx搭建反向代理服务器，把请求转发给Python后，通过Python执行请求的响应和后续的批处理。</p>
<p>由于我VPS选用的是<code>Ubuntu</code>，所以安装nginx也非常简单，直接执行一下命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install nginx</div></pre></td></tr></table></figure></p>
<p>修改<code>/etc/nginx/sites-available/default</code>文件，增加路由让其转发对应地址的请求至Python程序。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location /update &#123;</div><div class="line">        proxy_pass http://127.0.0.1:1111;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>重启nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo /etc/init.d/nginx restart</div></pre></td></tr></table></figure></p>
<h5 id="2-Python配置"><a href="#2-Python配置" class="headerlink" title="2. Python配置"></a>2. Python配置</h5><p>代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># start a python service and watch the nginx request dog</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer,CGIHTTPRequestHandler</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,RLock</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"></div><div class="line"></div><div class="line">_PWD=os.path.abspath(os.path.dirname(__file__))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_cmd</span><span class="params">(args,cwd=None,timeout=<span class="number">30</span>)</span>:</span></div><div class="line">    <span class="keyword">if</span> isinstance(args,str): args = [args]</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">with</span> subprocess.Popen(args,stdout=subprocess.PIPE,cwd=cwd) <span class="keyword">as</span> proc:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                output,unused_err = proc.communicate(timeout=timeout)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                proc.kill()</div><div class="line">                <span class="keyword">raise</span></div><div class="line">            retcode = proc.poll()</div><div class="line">            <span class="keyword">if</span> retcode:</div><div class="line">                <span class="keyword">raise</span> subprocess.CalledProcessError(retcode, proc.args, output=output)</div><div class="line">            <span class="keyword">return</span> output.decode(<span class="string">'utf-8'</span>,<span class="string">'ignore'</span>) <span class="keyword">if</span> output <span class="keyword">else</span> <span class="string">''</span></div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</div><div class="line">        logging.error(<span class="string">'EXECUTE_CMD_ERROR: %s'</span>,<span class="string">' '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> args))</div><div class="line">        <span class="keyword">raise</span> ex</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpHandler</span><span class="params">(CGIHTTPRequestHandler)</span>:</span></div><div class="line">    _lock = RLock()</div><div class="line">    _counter = <span class="number">0</span></div><div class="line">    _building = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">with</span> HttpHandler._lock:</div><div class="line">            <span class="keyword">if</span> HttpHandler._counter == <span class="number">0</span> <span class="keyword">or</span> HttpHandler._building:</div><div class="line">                <span class="keyword">return</span></div><div class="line">        HttpHandler._counter = <span class="number">0</span></div><div class="line">        HttpHandler._building = <span class="keyword">True</span></div><div class="line">        logging.info(<span class="string">"BUILDING NOW..."</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            resp = execute_cmd(os.path.join(_PWD,<span class="string">'build.sh'</span>),cwd=_PWD,timeout=<span class="number">600</span>)</div><div class="line">            logging.info(resp)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            HttpHandler._building = <span class="keyword">False</span></div><div class="line">            self.build()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></div><div class="line">        self.do_POST()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_POST</span><span class="params">(self)</span>:</span></div><div class="line">        self.send_response(<span class="number">200</span>,<span class="string">'OK'</span>)</div><div class="line">        self.end_headers()</div><div class="line">        self.wfile.write(<span class="string">b'OK'</span>)</div><div class="line">        self.wfile.flush()</div><div class="line">        <span class="keyword">with</span> HttpHandler._lock:</div><div class="line">            HttpHandler._counter += <span class="number">1</span></div><div class="line">        Thread(target=self.build).start()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    logging.basicConfig(format=<span class="string">'%(asctime)s %(levelname)s: %(message)s'</span>,level=logging.INFO)</div><div class="line"></div><div class="line">    port = int(sys.argv[<span class="number">1</span>]) <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1111</span></div><div class="line">    logging.info(<span class="string">'starting the server at 127.0.0.1:%s'</span>,port)</div><div class="line">    httpd = HTTPServer((<span class="string">'127.0.0.1'</span>,port),HttpHandler)</div><div class="line">    httpd.serve_forever()</div></pre></td></tr></table></figure></p>
<p>将Python文件<code>hook.py</code>和对应的批处理文件<code>build.sh</code>都放置在hexo的目录下，启动Python监听：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nohup python3 hook.py &gt;&gt; /tmp/hook.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure></p>
<p>####批处理Shell<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"build at `date`"</span></div><div class="line">. ~/.nvm/nvm.sh</div><div class="line">nvm use 0.10.35</div><div class="line">git pull</div><div class="line">hexo g -<span class="_">-d</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"built successfully"</span></div></pre></td></tr></table></figure></p>
<p>当然，为了让Python能够正确执行脚本，还需要执行一下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod +x build.sh</div></pre></td></tr></table></figure></p>
<hr>
<p>到此为止基本上都已经配置完毕，提交一个测试文件试一下，查看一下各自日志以及<strong>github</strong>的日志，没有问题，都成功了。</p>
<p>以后终于可以直接提交markdown，而不用再去生成发布，哪怕是新电脑，没有环境问题，只要有浏览器有网络，一切都那么地简单。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Raneto：用Markdown写作、Nodejs搭建的Wiki]]></title>
      <url>http://sumw3.com/2014/07/20140711-RanetoANodejsWiki/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近对<strong>Markdown</strong>很感兴趣，刚在Github上搭建了这个站点，用来记录平时的一些技巧心得。但是还有一些属于经常用到的，可以不断套用的东西，用现在这个站来记录的话，查找起来比较麻烦。因此，想找一款能直接<strong>Markdown</strong>记录，用树形结构组织，支持全文检索的Wiki软件。Github上搜了一圈，对比了几个Repo，最终选择<a href="1"><strong>Raneto</strong></a>。</p>
</blockquote>
<h2 id="Raneto"><a href="#Raneto" class="headerlink" title="Raneto"></a>Raneto</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><h4 id="Markdown-powered-Knowledgebase-for-Nodejs"><a href="#Markdown-powered-Knowledgebase-for-Nodejs" class="headerlink" title="Markdown powered Knowledgebase for Nodejs"></a>Markdown powered Knowledgebase for Nodejs</h4><blockquote>
<p>Raneto is an open source Knowledgebase platform that uses static Markdown files to power your Knowledgebase.</p>
</blockquote>
<ul>
<li>基于<strong>Nodejs</strong>以及<strong>Express</strong>构建，支持<strong>GFM</strong>的<strong>Markdown</strong>文件，利用<strong>Lunr</strong>进行全文检索。</li>
<li>基于文件目录的URL结构，无需数据库</li>
<li>基于<strong>Bootstrap</strong>的响应式模板，方便多终端访问</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>由于是<strong>Nodejs</strong>应用，安装非常方便。<em>当然，前提是机器上已有<strong>Nodejs</strong></em></p>
<ol>
<li>下载托管在<strong>Github</strong>上的<strong>Raneto</strong>代码，这里提供最新的<a href="3"><em>Release</em>版本下载</a>。</li>
<li>解压，在文件夹内用命令行执行<code>npm install</code>安装依赖包。</li>
<li>命令行执行<code>npm start</code>启动应用。</li>
<li>访问<code>http://localhost:3000</code>即可。<a id="more"></a>
</li>
</ol>
<h3 id="内容管理"><a href="#内容管理" class="headerlink" title="内容管理"></a>内容管理</h3><p>默认的内容文件夹为<code>content</code>，里面默认已经有了<strong>Raneto</strong>的说明手册，很好的例子。<br>修改文件名或者文件夹名称可以改变对应的URL，只要浏览器刷新整个结构貌似就会重建，这点非常强大，修改文件内容也是一样，刷新就显示。<br>当然，通过修改<code>config.js</code>可以自定义<code>content</code>文件夹位置和静态图片位置。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// The base URL of your images folder (can use %image_url% in Markdown files)</div><div class="line">image_url: '/images',</div><div class="line"></div><div class="line">// Specify the path of your content folder where all your '.md' files are located</div><div class="line">content_dir: './content/',</div></pre></td></tr></table></figure></p>
<h3 id="其他扩展及问题"><a href="#其他扩展及问题" class="headerlink" title="其他扩展及问题"></a>其他扩展及问题</h3><p>目前最理想的使用方法是在<strong>VPS</strong>上结合<strong>Dropbox</strong>来同步<code>content</code>和<code>image</code>文件夹，这样的话就可以从任意终端来更新访问了，感觉会非常方便。</p>
<p>当然，目前<strong>Raneto</strong>最大的问题是中文支持，其实不应该算<strong>Raneto</strong>的问题，而应该是<a href="4"><strong>lunrjs</strong></a>的问题。目前没有中文、日文检索的支持。</p>
<p>查看了<strong>lunrjs</strong>的<a href="https://github.com/olivernn/lunr.js/issues" target="_blank" rel="external"><em>Issues</em></a>，发现<a href="https://github.com/ming300" target="_blank" rel="external"><em>ming300</em></a>同学针对这个问题已经提过<a href="https://github.com/olivernn/lunr.js/pull/96" target="_blank" rel="external"><em>Pull Request</em></a>，有需要可以参考一下。</p>
<blockquote>
<p><strong>lunrjs</strong>也有语言支持的插件<a href="https://github.com/MihaiValentin/lunr-languages" target="_blank" rel="external"><strong>lunr-languages</strong></a>，但是也很遗憾，还没有中文的支持，下次研究一下，看看能不能搞一个提交上去。</p>
</blockquote>
<p>既然检索不了中文，那我就用定义一些<code>Keyword</code>来方便检索吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL SERVER 2005恢复数据错误（3154）]]></title>
      <url>http://sumw3.com/2014/07/20140709-3154ErrorOfSqlServer/</url>
      <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在<strong>SqlServer2005</strong>的<strong>Management studio</strong>里使用<code>bak</code>文件还原数据库的时候总是会发生下面的错误。</p>
<p><img src="https://ws1.sinaimg.cn/large/68f944b2gy1fexr1huuamj20jj0hlwi7.jpg" alt="SQL Server restore error"></p>
<blockquote>
<p>Restore failed for Server ‘ADANDELI’. (Microsoft.SqlServer.Smo)<br>An exception occurred while executing a Transact-SQL statement or batch.  (Microsoft.SqlServer.ConnectionInfo<br>The backup set holds a backup of a database other than the existing ‘AAA’ database.<br>RESTORE DATABASE is terminating abnormally. (Microsoft SQL Server，错误: 3154)</p>
</blockquote>
<a id="more"></a>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>查询备份文件中的逻辑文件名称</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">USE</span> <span class="keyword">master</span></div><div class="line"><span class="keyword">RESTORE</span> FILELISTONLY</div><div class="line">   <span class="keyword">FROM</span> DISK = <span class="string">'C:\back.Bak'</span></div><div class="line"><span class="keyword">Go</span></div></pre></td></tr></table></figure>
<h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>利用bak恢复数据库，强制还原<code>(REPLACE)</code>。<br><code>STATS = 10</code>每完成10%显示一条记录。<br><code>DBTest</code>和<code>DBTest_log</code>是上面<code>C:\back.Bak</code>里的逻辑文件</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">USE</span> <span class="keyword">master</span></div><div class="line"><span class="keyword">RESTORE</span> <span class="keyword">DATABASE</span> DB_Test</div><div class="line">   <span class="keyword">FROM</span> DISK = <span class="string">'C:\back.Bak'</span></div><div class="line">   <span class="keyword">WITH</span> <span class="keyword">MOVE</span> <span class="string">'DBTest'</span> <span class="keyword">TO</span> <span class="string">'C:\Program Files\Microsoft SQL Server2005\Data\DB.mdf'</span>,</div><div class="line">   <span class="keyword">MOVE</span> <span class="string">'DBTest_log'</span> <span class="keyword">TO</span> <span class="string">'C:\Program Files\Microsoft SQL Server2005\Data\DB_log.ldf'</span>,</div><div class="line">STATS = <span class="number">10</span>, <span class="keyword">REPLACE</span></div><div class="line"><span class="keyword">GO</span></div></pre></td></tr></table></figure>
<p>到此数据库恢复完毕，在数据库列表中应该会出现名为<code>DB_Test</code>的数据库。</p>
<blockquote>
<p>代码中相关参数请参考实际自行修改</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开始使用Hexo]]></title>
      <url>http://sumw3.com/2014/07/Hexo-started/</url>
      <content type="html"><![CDATA[<p>原来网站是<strong>wordpress</strong>的，用的也是免费空间<a href="http://www.000webhost.com" target="_blank" rel="external"><strong>000webhost</strong></a>。服务的稳定性还算不错，已经用了几年了，除了偶尔抽风down机之外，作为免费的空间来说还是很不错的。如果有同学要稳定的免费空间，推荐<a href="http://www.000webhost.com" target="_blank" rel="external"><strong>000webhost</strong></a>。</p>
<blockquote>
<p>关于<strong>000webhost</strong>，注册可能会麻烦一点，需要挂<strong>VPN</strong>或者使用代理，具体方法可自行Google。</p>
</blockquote>
<h3 id="初识Hexo"><a href="#初识Hexo" class="headerlink" title="初识Hexo"></a>初识Hexo</h3><p>一开始只是想用<strong>Markdown</strong>来写博客，但是<strong>wordpress</strong>本身对<strong>Markdown</strong>还不能支持，试了几个插件，效果都不是那么理想，在线编辑也都不支持预览，这对于一个<strong>Markdown</strong>新手来说，很不放心。</p>
<p>最近逛<strong>v2ex</strong>的时候也经常看到<strong>Github</strong>上搭建的静态博客。作为一个业余码农，博客更多的是记录一些平常碰到的技术问题和自己的一些学习心得，所以一个能够专注于文字和代码的<strong>Markdown</strong>加上<strong>Github</strong>这个无限免费的平台，非常有吸引力。</p>
<p>在<strong>Github</strong>上发布博客的工具也不少，目前最流行<strong>jekyll</strong>和<strong>octopress</strong>，但都是基于Ruby的，而<strong>Hexo</strong>是基于<strong>nodejs</strong>，<br>且生成速度更快，所以毫不犹豫的选择了<strong>Hexo</strong>。<br><a id="more"></a></p>
<h3 id="在Windows和Mac上安装Hexo"><a href="#在Windows和Mac上安装Hexo" class="headerlink" title="在Windows和Mac上安装Hexo"></a>在Windows和Mac上安装Hexo</h3><p>原来机器上就已经有<strong>nodejs</strong>、<strong>git</strong>环境了，所以安装<strong>Hexo</strong>就非常简单，一句代码就搞定了。<br><code>npm install hexo -g</code></p>
<p>然后就按照<a href="http://hexo.io/docs/" target="_blank" rel="external"><strong>官网设置手册</strong></a>一步步设置就行，非常简单，并且网上资料也很多，随便一个问题都能Google到答案。</p>
<h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><p>初识情况下<strong>Hexo</strong>就能非常完美的运行了，当然，作为中文用户来说，首先设置一下语言选项：<br><code>language: zh-CN</code><br>日期格式原来英文的，不太适应，也顺便改了一下：<br><code>date_format: YYYY-MM-D</code><br>剩下的就默认，最后安装了下面两个插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;hexo-generator-feed&quot;: &quot;^0.1.2&quot;,  </div><div class="line">&quot;hexo-generator-sitemap&quot;: &quot;~0.1.4&quot;</div></pre></td></tr></table></figure></p>
<p>主题的话，官方也提供了很多，<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">https://github.com/hexojs/hexo/wiki/Themes</a>，选择一个合适的，然后稍做修改即可。</p>
<p>我把整个文件夹<code>Github Page</code>也作为一个<code>Repo</code>同步了，这样的话不管是<strong>Windows</strong>上面还是<strong>Mac</strong>上面都可以同步修改了，比较方便。</p>
<blockquote>
<p>当然利用各种云盘同步也不错，我懒得装客户端了，就直接<strong>Git</strong>了。</p>
</blockquote>
<h3 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h3><p>目前觉得最麻烦的还是每次发布必须在电脑上执行一下<code>hexo d</code>，用其他电脑想发布新内容的话会比较麻烦，更不用说移动设备了。</p>
<p>下一步准备弄个<strong>VPS</strong>，把<strong>Hexo</strong>部署在上面，然后用同步盘同步到<strong>VPS</strong>后定时执行<code>hexo g</code>、<code>hexo d</code>应该就可以了吧。</p>
<p>目前就这么多内容，下次想到什么再补充吧。</p>
]]></content>
    </entry>
    
  
  
</search>
